from os.path import join
import numpy as np
import pandas as pd

from configuration import DATA_PATH,  SURVEY_FILE, RAW_SURVEY_BATCH1_FILE, RAW_SURVEY_BATCH2_FILE\
    , GIT_PROFILE_QUESTION, REPLY_EMAIL_QUESTION, COLUMNS_DICT_FILE, REPOSITORY_QUESTION, SAMPLING_COL

SURVEY_COL = 'survey'


def generate_column_name_dict(df: pd.DataFrame
                              , dict_file):
        with open(dict_file
                    , 'w') as f:
            f.write("%s" % df.iloc[0].to_dict())

def create_joint_survey():

    df1 = pd.read_csv(join(DATA_PATH
                          , RAW_SURVEY_BATCH1_FILE))
    df1[SURVEY_COL] = RAW_SURVEY_BATCH1_FILE
    df1[SAMPLING_COL] = 'random_approach'

    generate_column_name_dict(df1
                                , join(DATA_PATH
                                         , COLUMNS_DICT_FILE))
    df1 = df1.drop([0, 1]) # Remove unneeded row generated by qualtrics

    df2 = pd.read_csv(join(DATA_PATH
                          , RAW_SURVEY_BATCH2_FILE))
    df2 = df2.drop([0, 1]) # Remove unneeded row generated by qualtrics
    df2[SURVEY_COL] = RAW_SURVEY_BATCH2_FILE
    df2[SAMPLING_COL] = 'other'

    return pd.concat([df1, df2])

def cannonize_reop_name(repo_name):
    repo_name = repo_name.lower()
    cannonized = repo_name

    GIT_URL = "https://github.com/"

    if repo_name.startswith(GIT_URL):
        cannonized =  repo_name[len(GIT_URL):]
    elif repo_name.startswith("http://github.com/"):
        cannonized = repo_name[len("http://github.com/"):]
    elif repo_name.startswith("https://github.com/"):
        cannonized = repo_name[len("https://github.com/"):]
    elif repo_name.startswith("github.com/"):
        cannonized =  repo_name[len("github.com/"):]

    return cannonized


def cannonize_profile(profile):
    cannonized = profile

    prefixes = ['https://github.com/'
        , 'https://www.github.com/'
        , 'http://github.com/'
        , 'http://www.github.com/'
        , 'github.com/'
        , 'www.github.com/'
        , 'GitHub.com/'
        , 'www.GitHub.com/'
                ]

    for i in prefixes:
        if profile.startswith(i):
            cannonized = profile[len(i):]

    if cannonized.endswith('/'):
        cannonized = cannonized[:-1]

    return cannonized


def featrues_as_numbers(df: pd.DataFrame):


    for i in df.columns:
        if i.startswith('Q'):
            try:
                df[i] = df[i].fillna(0)
                df[i] = df[i].map(lambda x: int(x) if x != np.nan else None)
                df[i] = df[i].map(lambda x: None if x == 0 else x)
            except ValueError:
                print("Error processing "
                      , i
                      #, "value"
                      #, df[i].value_counts()
                      )

    return df

def correct_repos_names(df):

    corrections_df = pd.read_csv(join(DATA_PATH
                                      , 'survey_repos_corrections.csv'))
    corrections_df = corrections_df[['repo_name', 'correct_repo_name']]
    corrections_df = corrections_df[corrections_df.correct_repo_name !='NO_REPO_FOUND']

    df = pd.merge(df
                  , corrections_df
                  , on='repo_name'
                  , how='left'
                  )
    df['correct_repo_name'] = df.apply(
        lambda x: x.repo_name if pd.isnull(x['correct_repo_name']) else x.correct_repo_name
                                    , axis=1)

    return df


def correct_profile_names(df):

    corrections_df = pd.read_csv(join(DATA_PATH
                                      , 'survey_profiles_corrections.csv'))
    corrections_df = corrections_df[['cannonized_profile', 'corrected_profile']]

    df = pd.merge(df
                  , corrections_df
                  , on='cannonized_profile'
                  , how='left'
                  )
    df['corrected_profile'] = df.apply(
        lambda x: x.cannonized_profile if pd.isnull(x['corrected_profile']) else x.corrected_profile
                                    , axis=1)

    return df

def survey_self_enhancement():


    df = create_joint_survey()

    GENDER_COLUMN = 'Q62'
    #genders = df[GENDER_COLUMN].unique()
    male_encoding = ['Male', 'Male ', 'M', 'male', 'm', 'mail', 'man', 'Man', 'Make', 'boi', 'male ', 'Males']
    female_encoding =  ['female', 'F', 'f', 'Female', 'Femal', 'boi']
    gender_encoding = [ 'No-binary', 'Half Female, Half Male', 'Non binary'] + female_encoding + male_encoding
    df['Is_male'] = df[GENDER_COLUMN].map(lambda x: 1 if x in male_encoding else 0 if x in female_encoding else None)

    df['repo_name'] = df[REPOSITORY_QUESTION]

    # Add to cannonization http://github.com/, github.com
    df['repo_name'] = df['repo_name'].map(lambda x: cannonize_reop_name(str(x)))

    # Get profiles
    df['cannonized_profile'] = df[GIT_PROFILE_QUESTION].map(lambda x: cannonize_profile(str(x)))

    df['user'] = df.repo_name.map(lambda x: x.split('/')[0])
    df['project'] = df.repo_name.map(lambda x: x.split('/')[1] if '/' in x else x)


    df['answer_day'] = df['StartDate'].map(lambda x: x[:10])

    df = featrues_as_numbers(df)
    df.to_csv(join(DATA_PATH
                          , SURVEY_FILE)
        , index=False)

    return df

    # TODO - value encoding - yes/no, male/female
    # TODO - answers about the community in a single person project

def generate_entities_to_correct_files(df):

    gdf = df.groupby('repo_name', as_index=False).agg({'Q1' : 'count'})
    gdf.to_csv(join(DATA_PATH,'survey_repos.csv')
               , index=False)

    gdf = df.groupby('cannonized_profile', as_index=False).agg({'Q1' : 'count'})
    gdf.to_csv(join(DATA_PATH, 'survey_profiles.csv')
               , index=False)


def describe_dataset(df):
    print("developers", len(df))
    print("developers with profile", df[GIT_PROFILE_QUESTION].nunique())
    print("repositories", df[REPOSITORY_QUESTION].nunique())
    print(df[REPOSITORY_QUESTION].value_counts())
    print(df['repo_name'].value_counts())
    print(df['user'].value_counts())

def run_enhance_survey():

    df = survey_self_enhancement()

    generate_entities_to_correct_files(df)

    # Done after manually correcting the files generated above
    df = correct_repos_names(df)
    df = correct_profile_names(df)

    df.to_csv(join(DATA_PATH
                          , SURVEY_FILE)
        , index=False)

    # Generate files for BQ
    gdf = df.groupby(['correct_repo_name', 'corrected_profile', 'answer_day'], as_index=False).agg({'Q1' : 'count'})
    gdf.to_csv(join(DATA_PATH, 'survey_profiles_and_repos.csv')
               , index=False)

    describe_dataset(df)

if __name__ == '__main__':
    run_enhance_survey()